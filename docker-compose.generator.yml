version: "3.9"
services:
  # postgrest:
  #   image: postgrest/postgrest:v10.1.2
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     PGRST_DB_URI: "postgres://postgres:postgres@postgres:5432/postgres"
  #     PGRST_OPENAPI_SERVER_PROXY_URI: "http://127.0.0.1:3000"
  #     PGRST_DB_ANON_ROLE: "web_anon"
  #     PGRST_DB_MAX_ROWS: "50"
  #   depends_on:
  #     - postgres
  postgres:
    image: postgis/postgis:14-3.2
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
      POSTGRES_DB: "postgres"
    ports:
      - "5432:5432"
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
      - ./docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d/
    restart: always
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"
        ]
      interval: "10s"
      timeout: "5s"
      retries: 5
  generator:

    build:
      args:
        BASE_IMAGE: technologiestiftung/qtrees-vectortiles_base:2.6.1
      context: .
      dockerfile: Dockerfile.generator
    environment:
      POSTGRES_HOST: "${POSTGRES_HOST}"
      POSTGRES_DB: "${POSTGRES_DB}"
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      WORKDIR: "/usr/app"
      TILESET_NAME: "${TILESET_NAME}"
      TILESET_DIR: "${TILESET_DIR}"
      TMP_DIR: "${TMP_DIR}"
      GEOJSON_OUTPUT_FILENAME: "${GEOJSON_OUTPUT_FILENAME}"
      POSTGRES_MATERIALIZE_VIEW_NAME: "${POSTGRES_MATERIALIZE_VIEW_NAME}"
      AWS_DEFAULT_REGION: "${AWS_DEFAULT_REGION}"
      AWS_ACCESS_KEY_ID: "${AWS_ACCESS_KEY_ID}"
      AWS_SECRET_ACCESS_KEY: "${AWS_SECRET_ACCESS_KEY}"
      AWS_BUCKET: "${AWS_BUCKET}"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - /tilesets:/tilesets
      # - ./:/usr/app
      - /tmp:/tmp
