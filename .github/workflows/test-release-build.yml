name: Docker CI
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  TILESET_NAME: trees.mbtiles
  TILESET_DIR: /tilesets
  TMP_DIR: /tmp
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  AWS_BUCKET: ${{ secrets.AWS_TEST_BUCKET }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}

  DEFAULT_BASE_IMAGE: technologiestiftung/qtrees-vectortiles-generator-base:2.5
on:
  push:
    branches: [main, staging]
    tags:
      - 'v*'
  pull_request:
    branches: [main, staging]
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)'
        required: false
        default: false
  release:
    types: [published]

jobs:
  test:
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout technologiestiftung/qtrees-vectortiles-generator
        uses: actions/checkout@v3
      - name: test docker compose
        env:
          GITHUB_TOKEN: ${{secrets.GH_PA_TOKEN}}
        run: |
          docker build --tag qtrees-vectortiles-generator-base:test --file ./Dockerfile.base .
          docker compose --file docker-compose.generator.yml up --abort-on-container-exit --no-color --exit-code-from generator
          docker compose --file docker-compose.yml --file docker-compose.test.yml up --abort-on-container-exit --no-color --exit-code-from mbtileserver
      - name: Tmate session
        if: ${{ failure() }}
        uses: mxschmitt/action-tmate@v3
        with:
          limit-access-to-actor: true

  release:
    name: Release
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    needs:
      - test
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          persist-credentials: false
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 'lts/*'
      - name: Install dependencies
        run: npm ci
      - name: Release
        env:
          GITHUB_TOKEN: ${{secrets.GH_TOKEN}}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: npx semantic-release
  build-and-push-docker-hub:
    needs:
      - test
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    steps:
      - name: Checkout source repository
        uses: actions/checkout@v3
      - name: Docker meta
        id: meta_base
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.IMAGE_NAME }}-base
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # - name: set BASE_IMAGE
      #   run: echo "BASE_IMAGE=${{ steps.meta_base.outputs.tags }}" >> $GITHUB_ENV

      - name: Build base
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile.base
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta_base.outputs.tags }}
          labels: ${{ steps.meta_base.outputs.labels }}
      - name: Build
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          build-args: |
            BASE_IMAGE=${{ steps.meta_base.outputs.tags }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  # We dont use ghcr yet. This is more like a redundanc backup
  build-and-push-ghcr:
    env:
      REGISTRY: ghcr.io
    needs:
      - test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker base
        id: metaghcr_base
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-base
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
      - name: Extract metadata (tags, labels) for Docker
        id: metaghcr
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      # - name: set BASE_IMAGE
      #   run: echo "BASE_IMAGE=${{ steps.metaghcr_base.outputs.tags }}" >> $GITHUB_ENV

      - name: Build base and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile.base
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.metaghcr_base.outputs.tags }}
          labels: ${{ steps.metaghcr_base.outputs.labels }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          build-args: |
            BASE_IMAGE=${{ steps.metaghcr_base.outputs.tags }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.metaghcr.outputs.tags }}
          labels: ${{ steps.metaghcr.outputs.labels }}
