# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Docker CI
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

  DEFAULT_BASE_IMAGE: technologiestiftung/qtrees-vectortiles-generator-base:2.2.0
on:
  push:
    branches: [main]
    tags:
      - 'v*'
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)'
        required: false
        default: false
  release:
    types: [published]

jobs:
  test:
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout technologiestiftung/qtrees-vectortiles-generator
        uses: actions/checkout@v3
      - name: test docker compose
        env:
          GITHUB_TOKEN: ${{secrets.GH_TOKEN}}
        run: |
          docker build --tag qtrees-vectortiles-generator-base:test --file ./Dockerfile.base .
          docker compose --file docker-compose.yml --file docker-compose.test.yml up --abort-on-container-exit --no-color --exit-code-from mbtileserver
  release:
    name: Release
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    needs:
      - test
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          persist-credentials: false
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 'lts/*'
      - name: Install dependencies
        run: npm ci
      - name: Release
        env:
          GITHUB_TOKEN: ${{secrets.GH_TOKEN}}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          # NPM_TOKEN: ${{secrets.NPM_TOKEN}}
        run: npx semantic-release
  build-and-push-docker-hub:
    needs:
      - test
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    steps:
      - name: Checkout source repository
        uses: actions/checkout@v3
      - name: Docker meta
        id: meta_base
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.IMAGE_NAME }}-base
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - uses: dorny/paths-filter@v2
        id: base_changes
        with:
          filters: |
            dockerfile:
              - 'Dockerfile.base'
      - name: set BASE_IMAGE on change
        if: steps.base_changes.outputs.dockerfile == 'true'
        run: echo "BASE_IMAGE=${{ steps.meta_base.outputs.tags }}" >> $GITHUB_ENV
      - name: set BASE_IMAGE if not changed
        if: steps.base_changes.outputs.dockerfile == 'false'
        run: echo "BASE_IMAGE=$DEFAULT_BASE_IMAGE" >> $GITHUB_ENV
      - name: Build base
        if: steps.base_changes.outputs.dockerfile == 'true'
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile.base
          push: ${{ github.event_name != 'pull_request' }}
          # platforms: "linux/amd64,linux/arm64,linux/arm/v7"
          tags: ${{ steps.meta_base.outputs.tags }}
          labels: ${{ steps.meta_base.outputs.labels }}
      - name: Build
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          # build-args: |
          # BASE_IMAGE=${{ steps.meta_base.outputs.tags }}
          push: ${{ github.event_name != 'pull_request' }}
          # platforms: "linux/amd64,linux/arm64,linux/arm/v7"
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # - name: Set Versions
      #   uses: actions/github-script@v6
      #   # run this action only if it was triggered by a release published
      #   if: github.event_name == 'release' && github.event.action == 'published'
      #   id: set_version
      #   with:
      #     script: |
      #       const tag = context.ref.substring(10)
      #       const no_v = tag.replace('v', '')
      #       core.setOutput('no-v', no_v)
      # - name: "run render webhook"
      #   if: github.event_name == 'release' && github.event.action == 'published'
      #   run: |
      #     curl -X POST ${{ secrets.RENDER_WEBHOOK_URL }}

  build-and-push-ghcr:
    env:
      REGISTRY: ghcr.io
    needs:
      - test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      # - name: Set up QEMU
      #   uses: docker/setup-qemu-action@v1
      #   with:
      #     platforms: all

      # - name: Set up Docker Buildx
      #   id: buildx
      #   uses: docker/setup-buildx-action@v1
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker base
        id: metaghcr_base
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-base
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
      - name: Extract metadata (tags, labels) for Docker
        id: metaghcr
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
      - uses: dorny/paths-filter@v2
        id: base_changes
        with:
          filters: |
            dockerfile:
              - 'Dockerfile.base'
      - name: set BASE_IMAGE on change
        if: steps.base_changes.outputs.dockerfile == 'true'
        run: echo "BASE_IMAGE=${{ steps.metaghcr_base.outputs.tags }}" >> $GITHUB_ENV
      - name: set BASE_IMAGE if not changed
        if: steps.base_changes.outputs.dockerfile == 'false'
        run: echo "BASE_IMAGE=$REGISTRY/$DEFAULT_BASE_IMAGE" >> $GITHUB_ENV
      - name: Build base and push Docker image
        if: steps.base_changes.outputs.dockerfile == 'true'
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile.base
          push: ${{ github.event_name != 'pull_request' }}
          # platforms: "linux/amd64,linux/arm64,linux/arm/v7"
          tags: ${{ steps.metaghcr_base.outputs.tags }}
          labels: ${{ steps.metaghcr_base.outputs.labels }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          # build-args: |
          # BASE_IMAGE=${{ steps.metaghcr_base.outputs.tags }}
          push: ${{ github.event_name != 'pull_request' }}
          # platforms: "linux/amd64,linux/arm64,linux/arm/v7"
          tags: ${{ steps.metaghcr.outputs.tags }}
          labels: ${{ steps.metaghcr.outputs.labels }}
